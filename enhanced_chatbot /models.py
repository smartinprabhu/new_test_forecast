"""
Pydantic models for Enhanced Agentic Chatbot API
"""

from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any, Union
from datetime import datetime
from enum import Enum


class IntentType(str, Enum):
    """Supported intent types."""
    DATA_UPLOAD = "data_upload"
    MODEL_TRAINING = "model_training"
    PREPROCESSING = "preprocessing"
    EVALUATION = "evaluation"
    FORECASTING = "forecasting"
    HELP = "help"
    GENERAL = "general"
    CONFIGURATION = "configuration"
    EXPORT = "export"


class AgentType(str, Enum):
    """Types of agents in the system."""
    DATA_ANALYSIS = "data_analysis"
    PREPROCESSING = "preprocessing"
    MODELING = "modeling"
    EVALUATION = "evaluation"
    PLANNING = "planning"
    EXECUTION = "execution"
    MONITORING = "monitoring"


class AgentStatusType(str, Enum):
    """Agent status types."""
    IDLE = "idle"
    BUSY = "busy"
    ERROR = "error"
    OFFLINE = "offline"


class WorkflowStatusType(str, Enum):
    """Workflow status types."""
    CREATED = "created"
    RUNNING = "running"
    PAUSED = "paused"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


# Core Models
class ChatMessage(BaseModel):
    """Chat message model."""
    id: str = Field(..., description="Message identifier")
    type: str = Field(..., description="Message type (user, assistant, system, agent)")
    content: str = Field(..., description="Message content")
    timestamp: datetime = Field(..., description="Message timestamp")
    agentId: Optional[str] = Field(None, description="Agent ID if from agent")
    workflowStep: Optional[str] = Field(None, description="Workflow step if applicable")
    attachments: List[Dict[str, Any]] = Field(default_factory=list, description="Message attachments")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")


class IntentAnalysis(BaseModel):
    """Intent analysis result from AI."""
    intent: IntentType = Field(..., description="Detected intent")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Extracted parameters")
    entities: List[Dict[str, Any]] = Field(default_factory=list, description="Named entities")
    reasoning: Optional[str] = Field(None, description="AI reasoning for the intent")


class BusinessInsight(BaseModel):
    """Business insight generated by AI."""
    insight_type: str = Field(..., description="Type of insight")
    title: str = Field(..., description="Insight title")
    description: str = Field(..., description="Detailed description")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Insight confidence")
    impact: str = Field(..., description="Business impact level")
    recommendations: List[str] = Field(default_factory=list, description="Action recommendations")
    supporting_data: Dict[str, Any] = Field(default_factory=dict, description="Supporting data")


# Request Models
class ChatRequest(BaseModel):
    """Request model for chat endpoint."""
    message: str = Field(..., description="User message")
    session_id: str = Field(..., description="Session identifier")
    user_id: Optional[str] = Field(None, description="User identifier")
    context: Dict[str, Any] = Field(default_factory=dict, description="Conversation context")


class WorkflowRequest(BaseModel):
    """Request model for workflow execution."""
    session_id: str = Field(..., description="Session identifier")
    workflow_plan: Dict[str, Any] = Field(..., description="Workflow execution plan")
    auto_approve: bool = Field(False, description="Auto-approve all steps")


# Response Models
class HealthResponse(BaseModel):
    """Health check response."""
    status: str = Field(..., description="System status")
    timestamp: str = Field(..., description="Response timestamp")
    version: str = Field(..., description="API version")
    components: Dict[str, str] = Field(default_factory=dict, description="Component statuses")


class IntentAnalysis(BaseModel):
    """Intent analysis result from Gemini AI."""
    intent: IntentType = Field(..., description="Detected intent")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Confidence score")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Extracted parameters")
    entities: List[Dict[str, Any]] = Field(default_factory=list, description="Named entities")
    reasoning: Optional[str] = Field(None, description="AI reasoning for the intent")


class ChatResponse(BaseModel):
    """Response model for chat endpoint."""
    response: str = Field(..., description="AI assistant response")
    intent: IntentType = Field(..., description="Detected user intent")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Response confidence")
    action_required: Optional[str] = Field(None, description="Required action from user")
    task_id: Optional[str] = Field(None, description="Task identifier for tracking")
    agents_created: List[str] = Field(default_factory=list, description="Created agent IDs")
    suggestions: List[str] = Field(default_factory=list, description="Suggested follow-up actions")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Additional metadata")
    
    # Optional data fields for specific intents
    forecast_data: Optional[Dict[str, Any]] = Field(None, description="Forecast results")
    confidence_intervals: Optional[Dict[str, Any]] = Field(None, description="Forecast confidence intervals")
    metrics: Optional[Dict[str, Any]] = Field(None, description="Model performance metrics")
    results: Optional[Dict[str, Any]] = Field(None, description="Processing results")


class UploadResponse(BaseModel):
    """Response model for file upload."""
    session_id: str = Field(..., description="Session identifier")
    message: str = Field(..., description="Upload status message")
    data_info: Dict[str, Any] = Field(..., description="Data information")
    eda_insights: Optional[str] = Field(None, description="AI-generated insights about the data")
    success: bool = Field(..., description="Upload success status")


class AgentStatus(BaseModel):
    """Agent status information."""
    agent_id: str = Field(..., description="Agent identifier")
    agent_type: AgentType = Field(..., description="Type of agent")
    status: AgentStatusType = Field(..., description="Current agent status")
    current_task: Optional[str] = Field(None, description="Current task description")
    progress: float = Field(0.0, ge=0.0, le=100.0, description="Task progress percentage")
    start_time: Optional[datetime] = Field(None, description="Task start time")
    estimated_completion: Optional[datetime] = Field(None, description="Estimated completion time")
    performance_score: float = Field(0.0, ge=0.0, le=1.0, description="Agent performance score")
    capabilities: List[str] = Field(default_factory=list, description="Agent capabilities")
    workload: float = Field(0.0, ge=0.0, le=100.0, description="Current workload percentage")


class WorkflowStep(BaseModel):
    """Individual workflow step."""
    step_id: str = Field(..., description="Step identifier")
    name: str = Field(..., description="Step name")
    description: str = Field(..., description="Step description")
    agent_type: AgentType = Field(..., description="Required agent type")
    status: str = Field("pending", description="Step status")
    progress: float = Field(0.0, ge=0.0, le=100.0, description="Step progress")
    estimated_time: int = Field(..., description="Estimated time in seconds")
    dependencies: List[str] = Field(default_factory=list, description="Dependent step IDs")
    configuration: Dict[str, Any] = Field(default_factory=dict, description="Step configuration")
    results: Optional[Dict[str, Any]] = Field(None, description="Step results")


class WorkflowPlan(BaseModel):
    """Complete workflow execution plan."""
    plan_id: str = Field(..., description="Plan identifier")
    name: str = Field(..., description="Plan name")
    description: str = Field(..., description="Plan description")
    steps: List[WorkflowStep] = Field(..., description="Workflow steps")
    estimated_duration: int = Field(..., description="Total estimated duration in seconds")
    dependencies: Dict[str, List[str]] = Field(default_factory=dict, description="Step dependencies")


class WorkflowResponse(BaseModel):
    """Response model for workflow operations."""
    workflow_id: str = Field(..., description="Workflow identifier")
    status: WorkflowStatusType = Field(..., description="Workflow status")
    message: str = Field(..., description="Status message")
    estimated_completion: Optional[datetime] = Field(None, description="Estimated completion time")
    current_step: Optional[str] = Field(None, description="Current executing step")
    progress: float = Field(0.0, ge=0.0, le=100.0, description="Overall progress")


class AgentCapability(BaseModel):
    """Agent capability definition."""
    name: str = Field(..., description="Capability name")
    description: str = Field(..., description="Capability description")
    input_types: List[str] = Field(..., description="Supported input types")
    output_types: List[str] = Field(..., description="Supported output types")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Capability parameters")


class Task(BaseModel):
    """Task definition for agents."""
    task_id: str = Field(..., description="Task identifier")
    name: str = Field(..., description="Task name")
    description: str = Field(..., description="Task description")
    priority: int = Field(1, ge=1, le=10, description="Task priority (1-10)")
    required_capabilities: List[str] = Field(..., description="Required agent capabilities")
    input_data: Dict[str, Any] = Field(default_factory=dict, description="Task input data")
    configuration: Dict[str, Any] = Field(default_factory=dict, description="Task configuration")
    deadline: Optional[datetime] = Field(None, description="Task deadline")
    dependencies: List[str] = Field(default_factory=list, description="Dependent task IDs")


class TaskResult(BaseModel):
    """Task execution result."""
    task_id: str = Field(..., description="Task identifier")
    status: str = Field(..., description="Task status")
    result_data: Dict[str, Any] = Field(default_factory=dict, description="Task result data")
    execution_time: float = Field(..., description="Execution time in seconds")
    error_message: Optional[str] = Field(None, description="Error message if failed")
    agent_id: str = Field(..., description="Executing agent ID")
    timestamp: datetime = Field(default_factory=datetime.now, description="Completion timestamp")


class BusinessInsight(BaseModel):
    """Business insight generated by AI."""
    insight_type: str = Field(..., description="Type of insight")
    title: str = Field(..., description="Insight title")
    description: str = Field(..., description="Detailed description")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Insight confidence")
    impact: str = Field(..., description="Business impact level")
    recommendations: List[str] = Field(default_factory=list, description="Action recommendations")
    supporting_data: Dict[str, Any] = Field(default_factory=dict, description="Supporting data")


class ScenarioAnalysis(BaseModel):
    """Scenario analysis result."""
    scenario_id: str = Field(..., description="Scenario identifier")
    name: str = Field(..., description="Scenario name")
    description: str = Field(..., description="Scenario description")
    parameters: Dict[str, Any] = Field(..., description="Scenario parameters")
    forecast_data: Dict[str, Any] = Field(..., description="Scenario forecast results")
    comparison_baseline: Dict[str, Any] = Field(default_factory=dict, description="Baseline comparison")
    insights: List[BusinessInsight] = Field(default_factory=list, description="Scenario insights")


class ExportOptions(BaseModel):
    """Export configuration options."""
    format: str = Field(..., description="Export format (csv, excel, json, pdf)")
    include_charts: bool = Field(True, description="Include charts in export")
    include_metadata: bool = Field(True, description="Include metadata")
    include_insights: bool = Field(True, description="Include AI insights")
    custom_fields: List[str] = Field(default_factory=list, description="Custom fields to include")


class NotificationMessage(BaseModel):
    """Real-time notification message."""
    message_type: str = Field(..., description="Message type")
    session_id: str = Field(..., description="Target session ID")
    title: str = Field(..., description="Notification title")
    content: str = Field(..., description="Notification content")
    priority: str = Field("normal", description="Message priority")
    timestamp: datetime = Field(default_factory=datetime.now, description="Message timestamp")
    data: Dict[str, Any] = Field(default_factory=dict, description="Additional data")


class SystemMetrics(BaseModel):
    """System performance metrics."""
    active_sessions: int = Field(..., description="Number of active sessions")
    active_agents: int = Field(..., description="Number of active agents")
    running_workflows: int = Field(..., description="Number of running workflows")
    api_response_time: float = Field(..., description="Average API response time")
    gemini_api_calls: int = Field(..., description="Gemini API calls in last hour")
    error_rate: float = Field(..., description="Error rate percentage")
    system_load: float = Field(..., description="System load percentage")
    timestamp: datetime = Field(default_factory=datetime.now, description="Metrics timestamp")


# WebSocket Message Models
class WebSocketMessage(BaseModel):
    """Base WebSocket message."""
    type: str = Field(..., description="Message type")
    session_id: str = Field(..., description="Session identifier")
    timestamp: datetime = Field(default_factory=datetime.now, description="Message timestamp")
    data: Dict[str, Any] = Field(default_factory=dict, description="Message data")


class ProgressUpdate(WebSocketMessage):
    """Progress update message."""
    type: str = Field("progress_update", description="Message type")
    task_id: str = Field(..., description="Task identifier")
    progress: float = Field(..., ge=0.0, le=100.0, description="Progress percentage")
    message: str = Field(..., description="Progress message")
    estimated_completion: Optional[datetime] = Field(None, description="Estimated completion")


class AgentStatusUpdate(WebSocketMessage):
    """Agent status update message."""
    type: str = Field("agent_status_update", description="Message type")
    agent_id: str = Field(..., description="Agent identifier")
    status: AgentStatusType = Field(..., description="New agent status")
    details: str = Field(..., description="Status details")


class WorkflowStatusUpdate(WebSocketMessage):
    """Workflow status update message."""
    type: str = Field("workflow_status_update", description="Message type")
    workflow_id: str = Field(..., description="Workflow identifier")
    status: WorkflowStatusType = Field(..., description="New workflow status")
    current_step: Optional[str] = Field(None, description="Current step")
    progress: float = Field(..., ge=0.0, le=100.0, description="Overall progress")


class ErrorNotification(WebSocketMessage):
    """Error notification message."""
    type: str = Field("error_notification", description="Message type")
    error_type: str = Field(..., description="Error type")
    error_message: str = Field(..., description="Error message")
    recovery_suggestions: List[str] = Field(default_factory=list, description="Recovery suggestions")
    severity: str = Field("medium", description="Error severity")


class CompletionNotification(WebSocketMessage):
    """Task/workflow completion notification."""
    type: str = Field("completion_notification", description="Message type")
    task_type: str = Field(..., description="Completed task type")
    task_id: str = Field(..., description="Task identifier")
    success: bool = Field(..., description="Success status")
    results_summary: str = Field(..., description="Results summary")
    next_steps: List[str] = Field(default_factory=list, description="Suggested next steps")