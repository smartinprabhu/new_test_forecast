"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/services/GeminiAPIClient.ts":
/*!*****************************************!*\
  !*** ./app/services/GeminiAPIClient.ts ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiAPIClient: function() { return /* binding */ GeminiAPIClient; }\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nclass GeminiAPIClient {\n    getApiKey() {\n        // Priority: localStorage > environment > default\n        if (true) {\n            const savedKey = localStorage.getItem(\"gemini_api_key\");\n            if (savedKey) return savedKey;\n        }\n        return process.env.NEXT_PUBLIC_GEMINI_API_KEY || \"AIzaSyC9HUwhTJvg828gaLS7sfcG1DB5fGoB0CA\";\n    }\n    refreshApiKey() {\n        const newApiKey = this.getApiKey();\n        console.log(\"Refreshing Gemini API with key:\", newApiKey.substring(0, 10) + \"...\");\n        this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(newApiKey);\n        this.model = this.genAI.getGenerativeModel({\n            model: \"gemini-1.5-pro\"\n        });\n    }\n    async generateResponse(userInput, context, onStreamUpdate) {\n        try {\n            const prompt = this.buildPrompt(userInput, context);\n            const result = await this.model.generateContentStream(prompt);\n            let text = \"\";\n            for await (const chunk of result.stream){\n                const chunkText = chunk.text();\n                text += chunkText;\n                onStreamUpdate(chunkText);\n            }\n            return this.parseResponse(text, context);\n        } catch (error) {\n            console.error(\"Gemini API error:\", error);\n            return this.getFallbackResponse(userInput, context);\n        }\n    }\n    buildPrompt(userInput, context) {\n        const { messages, currentMode, workflowState, agentStatuses } = context;\n        // Build conversation history\n        const conversationHistory = messages.slice(-5) // Last 5 messages for context\n        .map((msg)=>\"\".concat(msg.type).concat(msg.agentId ? \" (\".concat(msg.agentId, \")\") : \"\", \": \").concat(msg.content)).join(\"\\n\");\n        // Build agent status summary\n        const agentSummary = agentStatuses.map((agent)=>\"\".concat(agent.name, \": \").concat(agent.status, \" - \").concat(agent.currentTask || \"idle\")).join(\"\\n\");\n        // Build workflow status\n        const workflowSummary = workflowState ? \"Workflow: \".concat(workflowState.status, \", Current Step: \").concat(workflowState.currentStep || \"none\", \", Progress: \").concat(workflowState.progress, \"%\") : \"No active workflow\";\n        // Detect if this is a general question vs workflow command\n        const isGeneralQuestion = !userInput.toLowerCase().match(/upload|demo|train|forecast|preprocess|analyze|model/);\n        if (isGeneralQuestion) {\n            return \"You are an AI Forecasting Assistant. You can help with both general questions and time series forecasting tasks.\\n\\nCURRENT CONTEXT:\\n- Mode: \".concat(currentMode, \"\\n- \").concat(workflowSummary, \"\\n\\nRECENT CONVERSATION:\\n\").concat(conversationHistory, '\\n\\nUSER QUESTION: \"').concat(userInput, \"\\\"\\n\\nINSTRUCTIONS:\\n1. Answer the user's question directly and helpfully\\n2. If it's about forecasting, provide expert knowledge on time series analysis\\n3. If it's a general question, answer naturally and conversationally\\n4. If they want to start forecasting, guide them to upload data or try demo\\n5. Keep responses concise and friendly\\n6. Use emojis appropriately\\n\\nFORECASTING EXPERTISE:\\n- Time series analysis, seasonality, trends\\n- Algorithms: Prophet, XGBoost, ARIMA, LightGBM, CatBoost\\n- Metrics: MAPE, MAE, RMSE, R\\xb2, directional accuracy\\n- Preprocessing: outlier detection, feature engineering, scaling\\n- Best practices for business forecasting\\n\\nProvide a helpful, natural response to their question.\");\n        }\n        return \"You are an advanced AI Forecasting Assistant with a team of specialized agents. You help users create accurate time series forecasts through an intelligent, conversational interface.\\n\\nSYSTEM CONTEXT:\\n- Current Mode: \".concat(currentMode, \"\\n- \").concat(workflowSummary, \"\\n- Agent Team Status:\\n\").concat(agentSummary, \"\\n\\nCONVERSATION HISTORY:\\n\").concat(conversationHistory, '\\n\\nUSER INPUT: \"').concat(userInput, \"\\\"\\n\\nINSTRUCTIONS:\\n1. You are the Supervisor Agent coordinating a team of specialized forecasting agents\\n2. Respond in a helpful, professional, and engaging manner\\n3. Use emojis appropriately to make the conversation friendly\\n4. Provide actionable next steps based on the current context\\n5. If in step-by-step mode, ask for user approval before proceeding\\n6. If in auto-execute mode, be more decisive and automated\\n7. Reference specific agents when discussing their capabilities\\n8. Maintain awareness of the workflow progress and current step\\n\\nAGENT CAPABILITIES:\\n- Data Analyst: Data quality assessment, pattern detection, statistical analysis\\n- Preprocessing Specialist: Data cleaning, feature engineering, outlier detection  \\n- Model Trainer: Algorithm training, hyperparameter tuning, model evaluation\\n- Forecasting Specialist: Forecast generation, confidence intervals, result analysis\\n\\nRESPONSE FORMAT:\\nProvide a natural, conversational response that:\\n- Acknowledges the user's input\\n- Explains what will happen next\\n- Mentions which agents will be involved\\n- Provides clear options for the user\\n- Maintains context of the current workflow state\\n\\nBe specific about forecasting concepts when relevant:\\n- Time series analysis techniques\\n- Algorithm selection (Prophet, XGBoost, ARIMA, LightGBM, etc.)\\n- Data preprocessing methods\\n- Model evaluation metrics (MAPE, MAE, RMSE, R\\xb2)\\n- Forecasting best practices\\n\\nKeep responses concise but informative. Focus on moving the conversation forward productively.\");\n    }\n    parseResponse(text, context) {\n        var _context_workflowState;\n        // Extract structured information from the response\n        const response = {\n            content: text,\n            confidence: 0.8,\n            suggestions: [],\n            options: []\n        };\n        // Analyze the response to suggest actions\n        const lowerText = text.toLowerCase();\n        // Determine if approval is required based on mode and content\n        if (context.currentMode === \"step-by-step\") {\n            if (lowerText.includes(\"process\") || lowerText.includes(\"train\") || lowerText.includes(\"analyze\")) {\n                response.requiresApproval = true;\n            }\n        }\n        // Generate contextual options based on current state\n        response.options = this.generateContextualOptions(context, lowerText);\n        // Suggest actions based on content analysis\n        if (lowerText.includes(\"upload\") && !context.workflowState) {\n            response.suggestedAction = \"prepare_upload\";\n        } else if (lowerText.includes(\"demo\") && !context.workflowState) {\n            response.suggestedAction = \"load_demo_data\";\n        } else if (lowerText.includes(\"train\") && ((_context_workflowState = context.workflowState) === null || _context_workflowState === void 0 ? void 0 : _context_workflowState.currentStep) === \"data_analysis\") {\n            response.suggestedAction = \"start_training\";\n        }\n        return response;\n    }\n    generateContextualOptions(context, responseText) {\n        const options = [];\n        const { currentMode, workflowState, agentStatuses } = context;\n        // No active workflow - initial options\n        if (!workflowState || workflowState.status === \"idle\") {\n            options.push({\n                id: \"upload\",\n                label: \"\\uD83D\\uDCCE Upload Dataset\",\n                action: \"upload_data\"\n            }, {\n                id: \"demo\",\n                label: \"\\uD83C\\uDFAF Try Demo Data\",\n                action: \"load_demo\"\n            });\n            if (currentMode === \"step-by-step\") {\n                options.push({\n                    id: \"workflow\",\n                    label: \"\\uD83D\\uDCCB Show Workflow\",\n                    action: \"show_workflow\"\n                });\n            }\n        } else if (workflowState.currentStep === \"data_upload\") {\n            if (currentMode === \"auto-execute\") {\n                options.push({\n                    id: \"auto_analyze\",\n                    label: \"⚡ Auto-Analyze\",\n                    action: \"auto_analyze_data\"\n                });\n            } else {\n                options.push({\n                    id: \"analyze\",\n                    label: \"\\uD83D\\uDD0D Analyze Data\",\n                    action: \"analyze_data\"\n                }, {\n                    id: \"customize\",\n                    label: \"⚙️ Customize Analysis\",\n                    action: \"customize_analysis\"\n                });\n            }\n        } else if (workflowState.currentStep === \"data_analysis\") {\n            if (currentMode === \"auto-execute\") {\n                options.push({\n                    id: \"auto_preprocess\",\n                    label: \"⚡ Auto-Preprocess\",\n                    action: \"auto_preprocess\"\n                });\n            } else {\n                options.push({\n                    id: \"preprocess\",\n                    label: \"\\uD83E\\uDDF9 Preprocess Data\",\n                    action: \"preprocess_data\"\n                }, {\n                    id: \"skip_preprocess\",\n                    label: \"⏭️ Skip Preprocessing\",\n                    action: \"skip_preprocessing\"\n                }, {\n                    id: \"customize_preprocess\",\n                    label: \"⚙️ Customize Preprocessing\",\n                    action: \"customize_preprocessing\"\n                });\n            }\n        } else if (workflowState.currentStep === \"preprocessing\") {\n            if (currentMode === \"auto-execute\") {\n                options.push({\n                    id: \"auto_train\",\n                    label: \"⚡ Auto-Train Models\",\n                    action: \"auto_train\"\n                });\n            } else {\n                options.push({\n                    id: \"train\",\n                    label: \"\\uD83D\\uDE80 Train Models\",\n                    action: \"train_models\"\n                }, {\n                    id: \"select_algorithms\",\n                    label: \"\\uD83E\\uDD16 Select Algorithms\",\n                    action: \"select_algorithms\"\n                }, {\n                    id: \"tune_params\",\n                    label: \"\\uD83C\\uDF9B️ Tune Parameters\",\n                    action: \"tune_parameters\"\n                });\n            }\n        } else if (workflowState.currentStep === \"training\") {\n            options.push({\n                id: \"view_results\",\n                label: \"\\uD83D\\uDCCA View Results\",\n                action: \"view_results\"\n            }, {\n                id: \"generate_forecast\",\n                label: \"\\uD83D\\uDCC8 Generate Forecast\",\n                action: \"generate_forecast\"\n            }, {\n                id: \"export\",\n                label: \"\\uD83D\\uDCCB Export Results\",\n                action: \"export_results\"\n            });\n        }\n        // Always available options\n        options.push({\n            id: \"help\",\n            label: \"❓ Help\",\n            action: \"show_help\"\n        });\n        return options;\n    }\n    getFallbackResponse(userInput, context) {\n        const { currentMode, workflowState } = context;\n        let content = 'I understand you said \"'.concat(userInput, '\". ');\n        if (!workflowState || workflowState.status === \"idle\") {\n            content += \"\\uD83D\\uDE80 **Let's get started with your forecasting project!**\\n\\nI'm your AI forecasting assistant with a team of specialized agents ready to help. Here's what I can do:\\n\\n**\\uD83D\\uDCCA Data Analysis**: Upload your time series data and I'll analyze patterns, seasonality, and quality\\n**\\uD83E\\uDDF9 Preprocessing**: Clean your data and engineer optimal features for forecasting\\n**\\uD83E\\uDD16 Model Training**: Train multiple algorithms (XGBoost, Prophet, LightGBM, etc.) and compare performance\\n**\\uD83D\\uDCC8 Forecasting**: Generate accurate predictions with confidence intervals\\n\\n**\\uD83C\\uDFAF Choose your approach:**\\n- **Auto-Execute**: Let me handle everything automatically\\n- **Step-by-Step**: Review and customize each step\\n\\nReady to begin?\";\n        } else {\n            content += \"\\uD83D\\uDCCB **Current Progress Update**\\n\\n\".concat(workflowState.currentStep ? \"We're currently at: \".concat(workflowState.currentStep) : \"Workflow is ready to continue\", \"\\nProgress: \").concat(Math.round(workflowState.progress), \"%\\n\\nBased on our current progress, here are your next options:\");\n        }\n        return {\n            content,\n            confidence: 0.8,\n            options: this.generateContextualOptions(context, userInput.toLowerCase())\n        };\n    }\n    async analyzeData(data, analysisType) {\n        try {\n            const prompt = \"Analyze this time series data and provide \".concat(analysisType, \" insights:\\n      \\nData summary: \").concat(JSON.stringify(data, null, 2), \"\\n\\nProvide specific insights about:\\n\").concat(analysisType === \"quality\" ? \"- Data completeness and accuracy\\n- Missing values and outliers\\n- Data type consistency\" : \"\", \"\\n\").concat(analysisType === \"patterns\" ? \"- Trend analysis\\n- Seasonal patterns\\n- Cyclical behavior\\n- Stationarity\" : \"\", \"\\n\").concat(analysisType === \"recommendations\" ? \"- Preprocessing recommendations\\n- Algorithm suggestions\\n- Feature engineering ideas\" : \"\", \"\\n\\nFormat the response as actionable insights for a forecasting project.\");\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            return response.text();\n        } catch (error) {\n            console.error(\"Data analysis error:\", error);\n            return \"Unable to analyze data: \".concat(error instanceof Error ? error.message : \"Unknown error\");\n        }\n    }\n    async generateWorkflow(dataCharacteristics, userPreferences) {\n        try {\n            const prompt = \"Generate an optimal forecasting workflow based on:\\n\\nData Characteristics:\\n\".concat(JSON.stringify(dataCharacteristics, null, 2), \"\\n\\nUser Preferences:\\n\").concat(JSON.stringify(userPreferences, null, 2), \"\\n\\nCreate a step-by-step workflow that includes:\\n1. Data preprocessing steps\\n2. Feature engineering recommendations\\n3. Algorithm selection rationale\\n4. Evaluation metrics\\n5. Expected timeline\\n\\nFormat as a structured workflow with clear steps, estimated times, and agent assignments.\");\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            return response.text();\n        } catch (error) {\n            console.error(\"Workflow generation error:\", error);\n            return null;\n        }\n    }\n    constructor(){\n        // Use the API key from localStorage, environment, or default\n        const apiKey = this.getApiKey();\n        console.log(\"Initializing Gemini API with key:\", apiKey.substring(0, 10) + \"...\");\n        this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\n        this.model = this.genAI.getGenerativeModel({\n            model: \"gemini-1.5-pro\"\n        });\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/services/GeminiAPIClient.ts\n"));

/***/ })

});